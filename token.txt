from flask import Flask, jsonify, request, make_response
import jwt
import datetime 
from functools import wraps
# jsonify - return json objects instead of html  
# request - will be to get the incoming request data, so this example I will get the login information and the the token depending on the situation  
# make_response - will be used  to tell the browser or the API that HTTP basic authentication is required for login 

app = Flask(__name__)
# create the secret key in cofiguration
app.config['SECRET_KEY'] = 'this_is_the_secret key'


#create the decorator to aply 'protected route'
def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = request.args.get('token') #http://127.0.0.1:5000/route?token=wfeuwe0fuwihfgrg  
        #verify, that data of token valied 

        if not token:
            return jsonify({'message': 'Token is missing!'}), 403 

        try:
            data = jwt.decode(token, app.config['SECRET_KEY'])
        except: 
            return jsonify({'massage': 'Token is invaled!'}), 403


        return f(*args, **kwargs)  
    
    return decorated

@app.route('/unprotected') # 127.0.0.1:5000/unprotected     - >     ('message' : 'Anyone can view this!')
def unprotected():
    return jsonify({'message' : 'Anyone can view this!'})    

#this route only for people, who authenticating

@app.route('/protected') # 127.0.0.1:5000/protected     - >     ('message' : 'Token is missing!')

                         # 127.0.0.1:5000/protected?token=this_is_the_secret key (or paste the token)    - >   'This is only available for people with valid token.'
#protect the route
@token_required
def protected():
    return jsonify({'message' : 'This is only available for people with valid token.'})   

#this route will get the token for the protected route and authorize of user
@app.route('/login') # 127.0.0.1:5000/login   - >   "token"  .................  
def login():
    auth = request.authorization

    if auth and auth.password == 'secret':  #127.0.0.1:5000/login
    # if auth and auth.password == 'password':
        #create a token for user, who logged in
        token = jwt.encode({'user' : auth.username, 'exp' : datetime.datetime.utcnow() + datetime.timedelta(minutes=30)}, app.config['SECRET_KEY'])
        # token = jwt.encode({'user' : auth.username, 'exp' : datetime.datetime.utcnow() + datetime.timedelta(seconds=15)}, app.config['SECRET_KEY'])
        #return the token as a json objects
        return jsonify({'token' : token.decode('UTF-8')})

    return make_response('Could not verify!', 401, {'WWW-Authenticate' : 'Basic realm="Login Required"'})





if __name__ == "__main__":
    app.run(debug=True)




###########################################



# from flask import Flask, request, jsonify, make_response, request, render_template, session
# import jwt
# from datetime import datetime, timedelta
# from functools import wraps


# app = Flask(__name__)


# app.config['SECRET_KEY'] = 'paste your secret code, which will generated by information from the file 'important.txt''

# def token_required(func):
#     # decorator factory which invoks update_wrapper() method and passes decorated function as an argument
#     @wraps(func)
#     def decorated(*args, **kwargs):
#         token = request.args.get('token')
#         if not token:
#             return jsonify({'Alert!': 'Token is missing!'}), 401

#         try:

#             data = jwt.decode(token, app.config['SECRET_KEY'])
#         # You can use the JWT errors in exception
#         # except jwt.InvalidTokenError:
#         #     return 'Invalid token. Please log in again.'
#         except:
#             return jsonify({'Message': 'Invalid token'}), 403
#         return func(*args, **kwargs)
#     return decorated


# @app.route('/')
# def home():
#     if not session.get('logged_in'):
#         return render_template('login.html')
#     else:
#         return 'logged in currently'

# @app.route('/public')
# def public():
#     return 'For Public'

# # auth only if you copy your token and paste it after /auth?query=XXXXXYour TokenXXXXX
# # Hit enter and you will get the message below.


# @app.route('/auth')
# @token_required
# def auth():
#     return 'JWT is verified. Welcome to your dashboard !  '

# # Login page


# @app.route('/login', methods=['POST'])
# def login():
#     if request.form['username'] and request.form['password'] == '123456':
#         session['logged_in'] = True

#         token = jwt.encode({
#             'user': request.form['username'],
            
#             'expiration': str(datetime.utcnow() + timedelta(seconds=60))
#         },
#             app.config['SECRET_KEY'])
#         return jsonify({'token': token})
        
#     else:
#         return make_response('Unable to verify', 403, {'WWW-Authenticate': 'Basic realm: "Authentication Failed "'})




# @app.route('/logout', methods=['POST'])
# def logout():
#     pass
# # your code goes here


# if __name__ == "__main__":
#     app.run(debug=True)


